{"version":3,"sources":["services/api.js","components/FilterByName.js","components/FilterBySpecies.js","components/Filters.js","components/CharacterCard.js","components/CharacterList.js","components/CharacterDetail.js","services/localStorage.js","components/App.js","reportWebVitals.js","index.js"],"names":["getApiData","fetch","then","res","json","data","results","map","eachCharacter","id","name","img","image","species","status","origin","episode","FilterByName","props","className","type","value","filterName","onChange","ev","handleFilter","target","key","FilterBySpecies","filterSpecies","Filters","CharacterCard","to","src","title","alt","CharacterList","characterCard","characters","CharacterDetail","character","length","get","defaultData","localStorage","getItem","JSON","parse","set","setItem","stringify","charactersLocalStorageData","ls","App","useState","setCharacters","setFilterName","setFilterSpecies","useEffect","charactersData","filteredCharacters","filter","toLowerCase","includes","path","render","routeCharacterId","match","params","foundCharacter","find","parseInt","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.bdcfaab7.chunk.js","sourcesContent":["function getApiData() {\r\n  //añadimos return porque la función getApiData tiene que retornar algo\r\n  //sino saldría undefined\r\n  return fetch(`https://rickandmortyapi.com/api/character`)\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      //filtramos los datos que nos interesan con un map\r\n      //los retornamos en un objeto y los añadimos al array filteredData\r\n      const filteredData = data.results.map((eachCharacter) => {\r\n        return {\r\n          id: eachCharacter.id,\r\n          name: eachCharacter.name,\r\n          img: eachCharacter.image,\r\n          species: eachCharacter.species,\r\n          status: eachCharacter.status,\r\n          origin: eachCharacter.origin,\r\n          episode: eachCharacter.episode,\r\n        };\r\n      });\r\n\r\n      return filteredData;\r\n    });\r\n}\r\n\r\nexport default getApiData;\r\n","function FilterByName(props) {\r\n  const handleChange = (ev) => {\r\n    props.handleFilter({\r\n      value: ev.target.value,\r\n      key: \"name\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <input\r\n      className=\"inputSearch\"\r\n      type=\"text\"\r\n      name=\"name\"\r\n      id=\"name\"\r\n      value={props.filterName}\r\n      onChange={handleChange}\r\n    />\r\n  );\r\n}\r\n\r\nexport default FilterByName;\r\n","function FilterBySpecies(props) {\r\n  const handleChange = (ev) => {\r\n    props.handleFilter({\r\n      value: ev.target.value,\r\n      key: \"species\",\r\n    });\r\n  };\r\n\r\n  return (\r\n    <select\r\n      className=\"inputSelect\"\r\n      name=\"species\"\r\n      id=\"species\"\r\n      value={props.filterSpecies}\r\n      onChange={handleChange}>\r\n      <option value=\"All\">Todos</option>\r\n      <option value=\"Human\">Humano</option>\r\n      <option value=\"Humanoid\">Humanoide</option>\r\n      <option value=\"Alien\">Alien</option>\r\n      <option value=\"Cronenberg\">Cronenberg</option>\r\n    </select>\r\n  );\r\n}\r\n\r\nexport default FilterBySpecies;\r\n","import FilterByName from \"./FilterByName\";\r\nimport FilterBySpecies from \"./FilterBySpecies\";\r\n\r\nfunction Filters(props) {\r\n  return (\r\n    <form className=\"Filters\">\r\n      <FilterByName\r\n        filterName={props.filterName}\r\n        handleFilter={props.handleFilter}\r\n      />\r\n      <FilterBySpecies\r\n        filterSpecies={props.filterSpecies}\r\n        handleFilter={props.handleFilter}\r\n      />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Filters;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nfunction CharacterCard(props) {\r\n  return (\r\n    <Link to={`/character/${props.eachCharacter.id}`}>\r\n      <article className=\"CharacterCard\">\r\n        <img\r\n          src={props.eachCharacter.img}\r\n          title={props.eachCharacter.name}\r\n          alt={props.eachCharacter.name}\r\n        />\r\n        <div className=\"characterInfo\">\r\n          <h3>{props.eachCharacter.name}</h3>\r\n          <p>{props.eachCharacter.species}</p>\r\n        </div>\r\n      </article>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default CharacterCard;\r\n","import CharacterCard from \"./CharacterCard\";\r\n\r\nfunction CharacterList(props) {\r\n  const characterCard = props.characters.map((eachCharacter) => {\r\n    return (\r\n      <li key={eachCharacter.id}>\r\n        <CharacterCard eachCharacter={eachCharacter} />\r\n      </li>\r\n    );\r\n  });\r\n\r\n  return <ul className=\"CharacterList\">{characterCard}</ul>;\r\n}\r\n\r\nexport default CharacterList;\r\n","import { Link } from \"react-router-dom\";\r\n\r\nfunction CharacterDetail(props) {\r\n  return (\r\n    <Link to=\"/\">\r\n      <div className=\"CharacterDetailBackground\">\r\n        <article className=\"CharacterDetail\">\r\n          <img\r\n            src={props.character.img}\r\n            title={props.character.name}\r\n            alt={props.character.name}\r\n          />\r\n          <div className=\"characterInfo\">\r\n            <h3>{props.character.name}</h3>\r\n            <ul>\r\n              <li>Status: {props.character.status}</li>\r\n              <li>Especie: {props.character.species}</li>\r\n              <li>Origen: {props.character.origin.name}</li>\r\n              <li>Episodios: {props.character.episode.length}</li>\r\n            </ul>\r\n          </div>\r\n        </article>\r\n      </div>\r\n    </Link>\r\n  );\r\n}\r\n\r\nexport default CharacterDetail;\r\n","function get(key, defaultData) {\r\n  const data = localStorage.getItem(key);\r\n  //si lo que me devuelve es null, es que no tengo data\r\n  //y si no tengo data, return una data por default que yo te diga\r\n  //para que no haya ningún momento donde salga undefined\r\n  if (data === null) {\r\n    return defaultData;\r\n  } else {\r\n    return JSON.parse(data);\r\n  }\r\n}\r\n\r\nfunction set(key, value) {\r\n  localStorage.setItem(key, JSON.stringify(value));\r\n}\r\n\r\nexport default {\r\n  get: get,\r\n  set: set,\r\n};\r\n","import { Route, Switch } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport \"../stylesheets/App.css\";\nimport getApiData from \"../services/api\";\nimport Filters from \"./Filters\";\nimport CharacterList from \"./CharacterList\";\nimport CharacterDetail from \"./CharacterDetail\";\nimport ls from \"../services/localStorage\";\n\n//podemos crear una const para pedir el localStorage fuera del componente\n//porque solo queremos que se ejecute una vez, no cada vez que se renderice\n//aunque funcionaría tanto si está fuera como si está dentro\n//el array vacío significa que if characters is undefined, ponme []\nconst charactersLocalStorageData = ls.get(\"characters\", []);\n\nfunction App() {\n  const [characters, setCharacters] = useState(charactersLocalStorageData);\n  const [filterName, setFilterName] = useState(ls.get(\"filterName\", \"\"));\n  const [filterSpecies, setFilterSpecies] = useState(\n    ls.get(\"filterSpecies\", \"All\")\n  );\n\n  useEffect(\n    () => {\n      //montaje, llamamos a la api\n\n      if (characters.length === 0) {\n        getApiData().then((charactersData) => {\n          //los datos que se guardan en el state son el filteredData del fetch\n          //por eso usamos then, porque lo que retorna el primer then, lo recibe el siguiente then\n          //esto es porque los then se encadenan\n          setCharacters(charactersData);\n        });\n      }\n    },\n    [] /* cuándo ejecutar useEffect */\n  );\n\n  //guardamos en localStorage\n  useEffect(() => {\n    ls.set(\"characters\", characters);\n  }, [characters]);\n\n  useEffect(() => {\n    ls.set(\"filterName\", filterName);\n  }, [filterName]);\n\n  useEffect(() => {\n    ls.set(\"filterSpecies\", filterSpecies);\n  }, [filterSpecies]);\n\n  //EV HANDLER\n\n  const handleFilter = (data) => {\n    if (data.key === \"name\") {\n      setFilterName(data.value);\n    } else if (data.key === \"species\") {\n      setFilterSpecies(data.value);\n    }\n  };\n\n  //RENDER\n  //filtramos por personaje y comprobamos si incluyen el filterName\n  const filteredCharacters = characters\n    .filter((eachCharacter) => {\n      return eachCharacter.name\n        .toLowerCase()\n        .includes(filterName.toLowerCase());\n    })\n    .filter((eachCharacter) => {\n      if (filterSpecies === \"All\") {\n        return true;\n      } else {\n        return eachCharacter.species === filterSpecies;\n      }\n    });\n\n  const renderCharacterDetail = (props) => {\n    const routeCharacterId = props.match.params.id;\n    const foundCharacter = characters.find((eachCharacter) => {\n      //búscame el id que sea igual al routeCharacterId\n      //pasamos a entero el routeCharacterId porque era un string\n      return eachCharacter.id === parseInt(routeCharacterId);\n    });\n\n    return <CharacterDetail character={foundCharacter} />;\n  };\n\n  return (\n    <>\n      <header className=\"header\">\n        <h1>Rick and Morty</h1>\n        <img\n          src=\"../../public/Rick_and_Morty_logo.png\"\n          alt=\"Rick and Morty logotipo\"\n        />\n\n        <Filters\n          filterName={filterName}\n          filterSpecies={filterSpecies}\n          handleFilter={handleFilter}\n        />\n      </header>\n      <main className=\"main\">\n        <CharacterList characters={filteredCharacters} />\n        <Switch>\n          <Route path=\"/character/:id\" render={renderCharacterDetail} />\n        </Switch>\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}