{"version":3,"sources":["services/api.js","components/Filters.js","components/CharacterCard.js","components/CharacterList.js","components/CharacterDetail.js","services/localStorage.js","components/App.js","reportWebVitals.js","index.js"],"names":["getApiData","fetch","then","res","json","data","results","map","eachCharacter","id","name","img","image","species","status","Filters","className","type","CharacterCard","props","src","title","alt","CharacterList","characterCard","characters","CharacterDetail","get","key","localStorage","getItem","JSON","parse","set","value","setItem","stringify","App","useState","setCharacters","useEffect","length","charactersData","ls","to","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"6QAqBeA,MArBf,WAGE,OAAOC,MAAM,wDACVC,MAAK,SAACC,GAAD,OAASA,EAAIC,UAClBF,MAAK,SAACG,GAYL,OATqBA,EAAKC,QAAQC,KAAI,SAACC,GACrC,MAAO,CACLC,GAAID,EAAcC,GAClBC,KAAMF,EAAcE,KACpBC,IAAKH,EAAcI,MACnBC,QAASL,EAAcK,QACvBC,OAAQN,EAAcM,e,OCNjBC,MARf,WACE,OACE,sBAAMC,UAAU,UAAhB,SACE,uBAAOA,UAAU,cAAcC,KAAK,cCa3BC,MAhBf,SAAuBC,GACrB,OACE,qBAAIH,UAAU,gBAAd,UACE,qBACEI,IAAKD,EAAMX,cAAcG,IACzBU,MAAOF,EAAMX,cAAcE,KAC3BY,IAAKH,EAAMX,cAAcE,OAE3B,sBAAKM,UAAU,gBAAf,UACE,6BAAKG,EAAMX,cAAcE,OACzB,4BAAIS,EAAMX,cAAcK,iBCEjBU,MAVf,SAAuBJ,GACrB,IAAMK,EAAgBL,EAAMM,WAAWlB,KAAI,SAACC,GAC1C,OACE,cAAC,EAAD,CAAsCA,cAAeA,GAAjCA,EAAcC,OAItC,OAAO,oBAAIO,UAAU,gBAAd,SAA+BQ,KCLzBE,MAJf,WACE,OAAO,8BCYM,OACbC,IAdF,SAAaC,GACX,IAAMvB,EAAOwB,aAAaC,QAAQF,GAElC,GAAKvB,EAEH,OAAO0B,KAAKC,MAAM3B,IAUpB4B,IANF,SAAaL,EAAKM,GAChBL,aAAaM,QAAQP,EAAKG,KAAKK,UAAUF,MC8C5BG,MA/Cf,WACE,MAAoCC,mBAAS,IAA7C,mBAAOb,EAAP,KAAmBc,EAAnB,KA0BA,OAxBAC,qBACE,WAG4B,IAAtBf,EAAWgB,QACbzC,IAAaE,MAAK,SAACwC,GAIjBH,EAAcG,QAQpB,IAGFF,qBAAU,WACRG,EAAGV,IAAI,aAAcR,KACpB,CAACA,IAGF,qCACE,yBAAQT,UAAU,SAAlB,UACE,eAAC,IAAD,CAAM4B,GAAG,IAAT,UACE,gDACA,qBACExB,IAAI,qDACJE,IAAI,+BAGR,cAAC,EAAD,OAEF,uBAAMN,UAAU,OAAhB,UACE,cAAC,EAAD,CAAeS,WAAYA,IAC3B,cAAC,EAAD,WCtCOoB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqB7C,MAAK,YAAkD,IAA/C8C,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAD,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BX,M","file":"static/js/main.2ead4c56.chunk.js","sourcesContent":["function getApiData() {\r\n  //añadimos return porque la función getApiData tiene que retornar algo\r\n  //sino saldría undefined\r\n  return fetch(\"https://rickandmortyapi.com/api/character/?name=rick\")\r\n    .then((res) => res.json())\r\n    .then((data) => {\r\n      //filtramos los datos que nos interesan con un map\r\n      //los retornamos en un objeto y los añadimos al array filteredData\r\n      const filteredData = data.results.map((eachCharacter) => {\r\n        return {\r\n          id: eachCharacter.id,\r\n          name: eachCharacter.name,\r\n          img: eachCharacter.image,\r\n          species: eachCharacter.species,\r\n          status: eachCharacter.status,\r\n        };\r\n      });\r\n      return filteredData;\r\n    });\r\n}\r\n\r\nexport default getApiData;\r\n","function Filters() {\r\n  return (\r\n    <form className=\"Filters\">\r\n      <input className=\"inputSearch\" type=\"search\" />\r\n    </form>\r\n  );\r\n}\r\n\r\nexport default Filters;\r\n","function CharacterCard(props) {\r\n  return (\r\n    <li className=\"CharacterCard\">\r\n      <img\r\n        src={props.eachCharacter.img}\r\n        title={props.eachCharacter.name}\r\n        alt={props.eachCharacter.name}\r\n      />\r\n      <div className=\"characterInfo\">\r\n        <h3>{props.eachCharacter.name}</h3>\r\n        <p>{props.eachCharacter.species}</p>\r\n      </div>\r\n    </li>\r\n  );\r\n}\r\n\r\nexport default CharacterCard;\r\n","import CharacterCard from \"./CharacterCard\";\r\n\r\nfunction CharacterList(props) {\r\n  const characterCard = props.characters.map((eachCharacter) => {\r\n    return (\r\n      <CharacterCard key={eachCharacter.id} eachCharacter={eachCharacter} />\r\n    );\r\n  });\r\n\r\n  return <ul className=\"CharacterList\">{characterCard}</ul>;\r\n}\r\n\r\nexport default CharacterList;\r\n","function CharacterDetail() {\r\n  return <></>;\r\n}\r\n\r\nexport default CharacterDetail;\r\n","function get(key) {\r\n  const data = localStorage.getItem(key);\r\n  //si lo que me devuelve es null, es que no tengo datos\r\n  if (!data) {\r\n  } else {\r\n    return JSON.parse(data);\r\n  }\r\n}\r\n\r\nfunction set(key, value) {\r\n  localStorage.setItem(key, JSON.stringify(value));\r\n}\r\n\r\nexport default {\r\n  get: get,\r\n  set: set,\r\n};\r\n","import { Link, Route, Switch } from \"react-router-dom\";\nimport { useState, useEffect } from \"react\";\nimport \"../stylesheets/App.css\";\nimport getApiData from \"../services/api\";\nimport Filters from \"./Filters\";\nimport CharacterList from \"./CharacterList\";\nimport CharacterDetail from \"./CharacterDetail\";\nimport ls from \"../services/localStorage\";\n\nfunction App() {\n  const [characters, setCharacters] = useState([]);\n\n  useEffect(\n    () => {\n      //montaje, llamamos a la api\n\n      if (characters.length === 0) {\n        getApiData().then((charactersData) => {\n          //los datos que se guardan en el state son el filteredData del fetch\n          //por eso usamos then, porque lo que retorna el primer then, lo recibe el siguiente then\n          //esto es porque los then se encadenan\n          setCharacters(charactersData);\n        });\n      }\n\n      //  return () => {\n      //desmontaje\n      //  };\n    },\n    [] /* cuándo ejecutar useEffect */\n  );\n\n  useEffect(() => {\n    ls.set(\"characters\", characters);\n  }, [characters]);\n\n  return (\n    <>\n      <header className=\"header\">\n        <Link to=\"/\">\n          <h1>Rick and Morty</h1>\n          <img\n            src=\"../../../docs/static/media/Rick_and_Morty_logo.png\"\n            alt=\"Rick and Morty logotipo\"\n          />\n        </Link>\n        <Filters />\n      </header>\n      <main className=\"main\">\n        <CharacterList characters={characters} />\n        <CharacterDetail />\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}